@using Pokerino.Client.Services
@using Pokerino.Shared.Models.Rooms
@inject IRoomService RoomService
@inject IAuthenticationService AuthenticationService

<Validations @ref="@validationsRef"
             Mode="ValidationMode.Manual"
             ValidateOnLoad="false"
             Model="@room">
    <div class="space-y-3">
        @if (AuthenticationService.User is null && AuthenticationService.AnonymousUser is null)
        {
            <Validation Validator="ValidationRule.IsNotEmpty">
                <Field>
                    <FieldLabel>Username</FieldLabel>
                    <TextEdit Placeholder="Enter the your username..." @bind-Text="@room.Username">
                        <Feedback>
                            <ValidationError>Username is required.</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>
        }

        <Validation Validator="ValidationRule.IsNotEmpty">
            <Field>
                <FieldLabel>Room Name</FieldLabel>
                <TextEdit Placeholder="Enter the room name..." @bind-Text="@room.Name">
                    <Feedback>
                        <ValidationError>Room Name is required.</ValidationError>
                    </Feedback>
                </TextEdit>
            </Field>
        </Validation>
        <Validation AsyncValidator="@ValidateJoinRoomIdAsync">
            <Field>
                <FieldLabel>Room ID</FieldLabel>
                <TextEdit Placeholder="Enter the room ID..." @bind-Text="@room.PublicId">
                    <Feedback>
                        <ValidationError>Room ID can't be empty or already exists</ValidationError>
                    </Feedback>
                </TextEdit>
            </Field>
        </Validation>
    </div>

    <Field Class="mt-4">
        <Blazorise.Button Color="Color.Primary" Clicked="@HandleSubmit">
            Let's play some
            <span class="font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-emerald-400 to-cyan-400 pl-1">Pokerino</span>!
        </Blazorise.Button>
    </Field>
</Validations>

@code {
    Validations validationsRef;
    private RoomCreateRequest room = new();

    [Parameter, EditorRequired]
    public Action<RoomCreateRequest> OnSubmit { get; set; }

    private async void HandleSubmit()
    {
        if (await validationsRef.ValidateAll())
        {
            if (OnSubmit is not null) OnSubmit(room);

            await validationsRef.ClearAll();
        }
    }

    public async Task ValidateJoinRoomIdAsync(ValidatorEventArgs e, CancellationToken cancellationToken)
    {
        cancellationToken.ThrowIfCancellationRequested();

        if (e.Value is null || string.IsNullOrEmpty(e.Value.ToString()))
        {
            e.Status = ValidationStatus.Error;
        }
        else
        {
            try
            {
                await RoomService.CheckIfExists(e.Value.ToString()!);
                e.Status = ValidationStatus.Error;
            }
            catch (Exception error)
            {
                e.Status = ValidationStatus.Success;
            }
        }
    }

}

