@page "/login"
@using Pokerino.Shared.Models
@using Pokerino.Client.Services
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@layout CenteredLayout

<Card>
    <CardBody>
        <CardTitle Class="dark:text-white text-gray-700 mb-5 text-xl">
            Sign in
        </CardTitle>
        <Validations @ref="@validationsRef"
                     Mode="ValidationMode.Manual"
                     ValidateOnLoad="false"
                     StatusChanged="@OnValidationsStatusChanged">
            <div class="space-y-3">
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Username</FieldLabel>
                        <TextEdit Placeholder="Enter the Username..." @bind-Text="@username">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field>
                        <FieldLabel>Password</FieldLabel>
                        <TextEdit Placeholder="Enter the Password..." Role="TextRole.Password" @bind-Text="@password">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>

                @if (formError is not null)
                {
                    <Alert Color="Color.Danger" Visible>
                        <AlertMessage>@formError</AlertMessage>
                    </Alert>
                }
            </div>

            <Field Class="mt-4">
                <Blazorise.Button Color="Color.Primary" Clicked="@HandleSignIn">
                    Sign in! 🚀
                </Blazorise.Button>
            </Field>

        </Validations>
    </CardBody>
</Card>

<div class="text-center text-gray-500 text-sm mt-5">
    If you don't have an account
    <NavLink href="register" class="text-blue-600">Sign up</NavLink>!
</div>

@code {
    Validations validationsRef;
    private string? formError;
    private string username;
    private string password;

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private Task OnValidationsStatusChanged(ValidationsStatusChangedEventArgs eventArgs)
    {
        if (eventArgs.Status == ValidationStatus.Success)
            formError = null;

        return Task.CompletedTask;
    }

    private async void HandleSignIn()
    {
        if (await validationsRef.ValidateAll())
        {
            var response = await AuthenticationService.Login(username, password);

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadFromJsonAsync<GeneralError>();
                formError = error?.Message ?? "API error occured";
                StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }

            await validationsRef.ClearAll();
        }
    }
}
