@page "/"
@using System.ComponentModel.DataAnnotations;
@using Pokerino.Shared.Entities;
@using Pokerino.Shared.Models.Rooms;
@using Pokerino.Client.Services;
@inject IAuthenticationService AuthenticationService
@inject IRoomService RoomService
@inject INotificationService NotificationService
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>

<div class="py-8 sm:py-10 lg:pb-10">
    <div class="mx-auto max-w-7xl px-6 lg:px-8">
        <div class="mx-auto max-w-2xl text-center">
            <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-6xl">
                <span class="font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-emerald-400 to-cyan-400">Pokerino</span>
            </h1>
            <p class="mt-2 text-xl font-extralight text-gray-600 dark:text-gray-400">
                @if (AuthenticationService.User is not null)
                {
                    <span><span class="font-semibold">@AuthenticationService.User.Username</span> welcome to</span>
                }
                the best scrum poker app in the galaxy
            </p>
        </div>
    </div>
</div>

<div class="flex flex-col gap-4 px-4 md:px-12 lg:px-32">
    <div class="flex gap-4">
        <Card Class="flex-1">
            <CardBody Class="flex flex-col h-full">
                <CardTitle Class="dark:text-white text-gray-700 mb-2 text-xl">
                    Create a room
                </CardTitle>
                <CardText Class="dark:text-gray-400">
                    Host a room and invite your colleagues to play some
                    <span class="font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-emerald-400 to-cyan-400 pl-0.5">Pokerino</span>!
                </CardText>
                <div Class="flex flex-col space-between h-full">
                    <CreateRoomForm OnSubmit="@HandleCreateRoom" />
                </div>
            </CardBody>
        </Card>
        <Card Class="flex-1">
            <CardBody Class="flex flex-col h-full">
                <CardTitle Class="dark:text-white text-gray-700 mb-2 text-xl">
                    Join a room
                </CardTitle>
                <CardText Class="dark:text-gray-400">
                    Join a room and rock some
                    <span class="font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-emerald-400 to-cyan-400 pl-0.5">Pokerino</span>!
                </CardText>
                <div Class="flex flex-col space-between h-full">
                    <JoinRoomForm OnSubmit="@HandleJoinRoom" />
                </div>
            </CardBody>
        </Card>
    </div>
    @if (_userRooms is not null && _userRooms.Count > 0)
    {
        <div class="space-y-2">
            <div class="flex gap-4 justify-center">
                <div class="p-5">
                    <h3 class="text-center text-xl font-extrabold text-gray-600 dark:text-white">
                        Your<br />rooms
                    </h3>
                </div>
                @foreach (var room in _userRooms.Take(4))
                {
                    <Card Class="flex-grow text-gray-600 dark:text-white">
                        <CardBody Class="flex flex-col h-full">
                            <CardTitle Class="flex justify-between">
                                <span class="text-base font-medium">@room.Name</span>
                                <span class="text-base font-extralight">@room.PublicId</span>
                            </CardTitle>
                            <div>
                                @if (room.Status != RoomStatus.Finished)
                                {
                                    <Button Color="Color.Primary" Size="Size.ExtraSmall"
                                            Clicked="@(() => NavigationManager.NavigateTo($"/room/{room.PublicId}"))">
                                        Join Room
                                    </Button>
                                }
                            </div>
                        </CardBody>
                    </Card>
                }
            </div>
        </div>
    }
</div>

<div class="text-center text-gray-500 text-sm mt-5">
    @if (AuthenticationService.User is null)
    {
        <span>
            <NavLink href="login" class="text-blue-600">Sign in</NavLink> if you already have an account.
            If you don't have an account <NavLink href="register" class="text-blue-600">Sign up</NavLink>!
        </span>
    }
    else
    {
        <span>
            <NavLink href="logout" class="text-blue-600">Log out</NavLink> 👋
        </span>
    }
</div>

@code
{
    private List<Pokerino.Shared.Entities.Room>? _userRooms;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationService.User is not null)
        {
            _userRooms = await RoomService.GetAllUserRooms(AuthenticationService.User.Id);
        }
    }

    private async void HandleCreateRoom(RoomCreateRequest room)
    {
        if (AuthenticationService.User is null && AuthenticationService.AnonymousUser is null)
        {
            await AuthenticationService.AnonymousLogin(room.Username!);
        }

        var response = await RoomService.CreateRoom(room);
        var newRoom = await response.Content.ReadFromJsonAsync<Pokerino.Shared.Entities.Room>();

        if (newRoom is not null)
            NavigationManager.NavigateTo($"/room/{newRoom.PublicId}");
        else NotificationService.Error("Failed to create new room 😔");
    }

    private void HandleJoinRoom(string publicId)
    {
        NavigationManager.NavigateTo($"/room/{publicId}");
    }
}
