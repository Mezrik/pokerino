@page "/register"
@using Pokerino.Shared.Models.Users
@using Pokerino.Shared.Models
@using Pokerino.Client.Services
@inject IUserService UserService

<div class="px-4 md:px-32 lg:px-56 xl:px-96">
    <Card>
        <CardBody>
            <CardTitle Class="dark:text-white text-gray-700 mb-5 text-xl">
                Register
            </CardTitle>
            <Validations @ref="@validationsRef"
                         Mode="ValidationMode.Auto"
                         ValidateOnLoad="false"
                         Model="@user"
                         StatusChanged="@OnValidationsStatusChanged">
                <div class="space-y-3">
                    <Validation>
                        <Field>
                            <FieldLabel>Username</FieldLabel>
                            <TextEdit Placeholder="Enter the Username..." @bind-Text="@user.Username">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>E-mail</FieldLabel>
                            <TextEdit Placeholder="Enter the E-mail..." @bind-Text="@user.Email">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Password</FieldLabel>
                            <TextEdit Placeholder="Enter the Password..." @bind-Text="@user.Password">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Confirm Password</FieldLabel>
                            <TextEdit Placeholder="Enter the Confirm Password..." @bind-Text="@user.ConfirmPassword">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>

                    @if (formError is not null)
                    {
                        <Alert Color="Color.Danger" Visible>
                            <AlertMessage>@formError</AlertMessage>
                        </Alert>
                    }
                </div>

                <Field Class="mt-4">
                    <Blazorise.Button Color="Color.Primary" Clicked="@HandleCreateUser">
                        Register
                    </Blazorise.Button>
                </Field>

            </Validations>
        </CardBody>
    </Card>
</div>

@code {
    Validations validationsRef;
    private string? formError;
    private UserCreateRequest user = new();

    private Task OnValidationsStatusChanged(ValidationsStatusChangedEventArgs eventArgs)
    {
        if (eventArgs.Status == ValidationStatus.Success)
            formError = null;

        return Task.CompletedTask;
    }

    private async void HandleCreateUser()
    {
        if (await validationsRef.ValidateAll())
        {
            var response = await UserService.CreateUser(user);

            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadFromJsonAsync<GeneralError>();
                formError = error?.Message ?? "API error occured";
                StateHasChanged();
            }

            await validationsRef.ClearAll();
        }
    }
}

