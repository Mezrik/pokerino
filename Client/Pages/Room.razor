@page "/room/{publicRoomId}"
@using System.Text.Json;
@using Pokerino.Client.Services
@using Pokerino.Shared.Entities
@using Pokerino.Shared.Models.Rooms
@using Microsoft.AspNetCore.SignalR.Client
@inject IAuthenticationService AuthenticationService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@layout SimpleLayout

<PageTitle>Room</PageTitle>

@if (_room is not null)
{
    <div class="flex gap-4 mb-8">
        <h1 class="font-extralight text-2xl text-gray-400">@_room.Name</h1>
        <Button Color="Color.Light" Size="Size.ExtraSmall" Clicked="@CopyTextToClipboard">
            <Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Copy" />
        </Button>
    </div>

    <div class="flex gap-4 flex-grow">
        <div class="w-96 space-y-4 flex flex-col">
            <h3 class="text-2xl font-extrabold text-gray-600 dark:text-white">
                Users
            </h3>
            <ListGroup Class="flex-grow overflow-y-auto">
                @foreach (var user in _room.RoomUsers)
                {
                    <ListGroupItem>
                        <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                            <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">@user.Name</Heading>
                            <Small>@(user.Role == Role.Guest ? "Guest" : "Host")</Small>
                        </Div>
                    </ListGroupItem>
                }
            </ListGroup>
        </div>

        <div class="w-96 space-y-4 flex flex-col">
            <div class="flex justify-between">
                <h3 class="text-2xl font-extrabold text-gray-600 dark:text-white">
                    Topics
                </h3>
                @if (_roomUser?.Role == Role.Host)
                {
                    <Button Color="Color.Primary" Size="Size.ExtraSmall" Clicked="@(() => _addTopicModalRef.Show())">
                        Add topic
                    </Button>
                }
            </div>
            <ListGroup Class="flex-grow overflow-y-auto"
                       Mode="@(_roomUser?.Role == Role.Host ? ListGroupMode.Selectable : ListGroupMode.Static)"
                       SelectedItem="@_selectedItem"
                       SelectedItemChanged="OnSelectedTopicChanged">
                @foreach (var topic in _room.Topics)
                {
                    <ListGroupItem Name="@topic.Id.ToString()">
                        <Div Width="Width.Is100">
                            <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100">
                                <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">@topic.Name</Heading>
                                @if (topic.Estimate is not null)
                                {
                                    <Badge Color="Color.Primary" Pill>Estimated: @String.Format("{0:0.00}", topic.Estimate)</Badge>
                                }
                            </Div>
                            <Paragraph Margin="Margin.Is1.FromBottom" Class="dark:text-gray-400">@topic.Description</Paragraph>
                            @if (_roomUser?.Role == Role.Host)
                            {
                                <div class="flex gap-2 mt-4">
                                    <Button Color="Color.Light" Size="Size.ExtraSmall" Clicked="@(() => SetTopicEdit(topic))">
                                        Edit
                                    </Button>
                                    <Button Color="Color.Light" Size="Size.ExtraSmall" Clicked="@(() => RemoveRoomTopic(topic))">
                                        Remove
                                    </Button>
                                </div>
                            }
                        </Div>
                    </ListGroupItem>
                }
            </ListGroup>
        </div>
        <div class="space-y-4 flex-grow flex flex-col">
            <h3 class="text-2xl font-extrabold text-gray-600 dark:text-white">
                Active Topic
            </h3>
            <Card Class="flex-grow overflow-y-auto">
                <CardBody Class="flex flex-col h-full">
                    @if (_room.ActiveTopic is not null)
                    {
                        <Heading Size="HeadingSize.Is5" Margin="Margin.Is1.FromBottom">@_room.ActiveTopic.Name</Heading>
                        <Paragraph Margin="Margin.Is1.FromBottom" Class="dark:text-gray-400">@_room.ActiveTopic.Description</Paragraph>
                        <div class="flex gap-2 mt-6">
                            @foreach (var value in possibleEstimates)
                            {
                                <Button Color="Color.Light" Clicked="@(() => VoteForCurrentTopicRoomTopic(value))">
                                    @value
                                </Button>
                            }
                        </div>

                        @if (_room.ActiveTopic.Estimate is null)
                        {
                            <h4 class="mt-6 text-lg font-semibold text-gray-600 dark:text-gray-300">Votes</h4>
                            <div class="flex gap-4 mt-2 flex-grow items-start">
                                @foreach (var userVote in currentUsersVotes)
                                {
                                    <div class="flex flex-col items-center justify-center text-gray-600 dark:text-gray-300">
                                        <div class="flex h-10 w-7 items-center justify-center rounded bg-primary-700 dark:bg-primary-600">
                                            @(_room.ActiveTopic.ShowVotes ? userVote.Vote?.Estimate.ToString() : userVote.Vote?.Estimate is not null ? "❔" : "")
                                        </div>
                                        <div>@userVote.User.Name</div>
                                    </div>
                                }
                            </div>

                            @if (_roomUser?.Role == Role.Host)
                            {
                                <div class="flex gap-2">
                                    <Button Color="Color.Light" Clicked="@ToggleTopicEstimateVotesVisibility">
                                        @if (_roomUser?.Role == Role.Host)
                                        {
                                            <span>@(_room.ActiveTopic.ShowVotes ? "Hide" : "Reveal") topic estimates</span>
                                        }
                                    </Button>
                                    <Button Color="Color.Light" Clicked="@ResetEstimating">
                                        Restart voting
                                    </Button>
                                    <Button Color="Color.Light" Disabled="@(!allVoted)" Clicked="@FinishEstimating">
                                        End voting
                                    </Button>
                                </div>
                            }
                        }
                    }
                </CardBody>
            </Card>
        </div>
    </div>

    @if (_roomUser?.Role == Role.Host)
    {
        <Modal @ref="_addTopicModalRef">
            <ModalContent Centered>
                <ModalHeader>
                    <ModalTitle>Add topic</ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody>
                    <AddTopicForm OnSubmit="@AddRoomTopic" />
                </ModalBody>
            </ModalContent>
        </Modal>

        <Modal @ref="_editTopicModalRef">
            <ModalContent Centered>
                <ModalHeader>
                    <ModalTitle>Edit topic</ModalTitle>
                    <CloseButton />
                </ModalHeader>
                <ModalBody>
                    <EditTopicForm OnSubmit="@EditRoomTopic" TopicName="@_editedTopic?.Name" TopicDescription="@_editedTopic?.Description" />
                </ModalBody>
            </ModalContent>
        </Modal>
    }
}

@code {
    public List<int> possibleEstimates = new List<int> { 0, 1, 2, 3, 5, 8, 13, 20 };

    [Parameter]
    public string? publicRoomId { get; set; }

    private Modal _addTopicModalRef;
    private Modal _editTopicModalRef;
    private string? _selectedItem;
    private RoomTopic? _editedTopic;

    private Pokerino.Shared.Entities.Room? _room;
    private RoomUser? _roomUser;

    private HubConnection? hubConnection;

    private List<UserVote> currentUsersVotes
    {
        get
        {
            return _room?.RoomUsers
            .GroupJoin(_room.ActiveTopic?.Votes,
                user => user.Name,
                vote => vote.Username,
                (user, votes) => new { User = user, Votes = votes })
            .SelectMany(
                userVotes => userVotes.Votes.DefaultIfEmpty(),
                (userVotes, vote) => new UserVote() { User = userVotes.User, Vote = vote })
            .ToList() ?? new();
        }
    }

    private bool allVoted
    {
        get { return currentUsersVotes.All(x => x.Vote is not null); }
    }

    private double finalEstimate
    {
        get { return currentUsersVotes.Average(x => x.Vote?.Estimate ?? 0); }
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationService.User is null && AuthenticationService.AnonymousUser is null)
        {
            Navigation.NavigateTo($"anonymous-login/{System.Net.WebUtility.UrlEncode($"/room/{publicRoomId}")}");
            return;
        }

        var connection = await InitializeHubConnection();

        if (publicRoomId is not null)
        {
            await connection.SendAsync("JoinRoom", publicRoomId, AuthenticationService.AnonymousUser?.Username);
        }
    }

    public async Task StartRoom()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("StartRoom");
        }
    }

    public async void AddRoomTopic(TopicCreateRequest topic)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AddRoomTopic", topic);
            await _addTopicModalRef.Hide();
        }
    }

    public async void ToggleTopicEstimateVotesVisibility()
    {
        if (hubConnection is not null && _room?.ActiveTopic is not null)
        {
            await hubConnection.SendAsync("ToggleTopicEstimateVotesVisibility", _room.ActiveTopic.Id);
        }
    }

    public async void EditRoomTopic(TopicUpdateRequest topic)
    {
        if (hubConnection is not null && _editedTopic is not null)
        {
            topic.Id = _editedTopic.Id;
            await hubConnection.SendAsync("UpdateRoomTopic", topic);
            await _editTopicModalRef.Hide();
        }
    }

    public async void RemoveRoomTopic(RoomTopic topic)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveRoomTopic", topic.Id);
        }
    }

    public async void VoteForCurrentTopicRoomTopic(int estimate)
    {
        if (hubConnection is not null && _room?.ActiveTopic is not null)
        {
            await hubConnection.SendAsync("VoteForRoomTopicEstimate", _room.ActiveTopic.Id, estimate);
        }
    }

    public async void FinishEstimating()
    {
        if (hubConnection is not null && allVoted && _room?.ActiveTopic is not null)
        {
            await hubConnection.SendAsync("SelectFinalRoomTopicEstimate", _room.ActiveTopic.Id, finalEstimate);
        }
    }

    public async void ResetEstimating()
    {
        if (hubConnection is not null && _room?.ActiveTopic is not null)
        {
            await hubConnection.SendAsync("RestartRoomTopicVoting", _room.ActiveTopic.Id);
        }
    }

    public void SetTopicEdit(RoomTopic topic)
    {
        _editedTopic = topic;
        _editTopicModalRef.Show();
    }

    public bool IsConnected =>
    hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task OnSelectedTopicChanged(string topicId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SelectRoomTopic", int.Parse(topicId));
            _selectedItem = topicId;
        }
    }

    private async Task CopyTextToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", Navigation.Uri);
    }

    private async Task<HubConnection>
    InitializeHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/hubs/room"), options =>
        {
            options.AccessTokenProvider = () => Task.FromResult<string?>
        (AuthenticationService.User?.Token);
        })
            .Build();

        hubConnection.On<string, string>
            ("ReceiveMessage", (user, message) =>
            {
                var encodedMsg = $"{user}: {message}";
                InvokeAsync(StateHasChanged);
            });

        hubConnection.On<string>
            ("Joined", (message) =>
            {
                var response = JsonSerializer.Deserialize<JoinRoomResponse>
                    (message);

                if (response is null) return;

                _room = response.Room;
                _roomUser = response.RoomUser;
                _selectedItem = response.Room.ActiveTopic.Id.ToString();

                InvokeAsync(StateHasChanged);
            });

        hubConnection.On<string>
            ("RoomStateChange", (message) =>
            {
                var response = JsonSerializer.Deserialize<Pokerino.Shared.Entities.Room>
                            (message);

                if (response is null) return;

                _room = response;

                InvokeAsync(StateHasChanged);
            });

        await hubConnection.StartAsync();

        return hubConnection;
    }

    public class UserVote
    {
        public RoomUser User { get; set; }
        public EstimateVote? Vote { get; set; }
    }
}
